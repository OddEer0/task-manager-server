// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/usecase/auth_usecase/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	authUsecase "github.com/OddEer0/task-manager-server/internal/app/usecase/auth_usecase"
	dto "github.com/OddEer0/task-manager-server/internal/presentation/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthUseCase is a mocks of AuthUseCase interface.
type MockAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCaseMockRecorder
}

// MockAuthUseCaseMockRecorder is the mocks recorder for MockAuthUseCase.
type MockAuthUseCaseMockRecorder struct {
	mock *MockAuthUseCase
}

// NewMockAuthUseCase creates a new mocks instance.
func NewMockAuthUseCase(ctrl *gomock.Controller) *MockAuthUseCase {
	mock := &MockAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUseCase) EXPECT() *MockAuthUseCaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthUseCase) Login(ctx context.Context, data dto.LoginInputDto) (*authUsecase.AuthResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, data)
	ret0, _ := ret[0].(*authUsecase.AuthResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthUseCaseMockRecorder) Login(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUseCase)(nil).Login), ctx, data)
}

// Logout mocks base method.
func (m *MockAuthUseCase) Logout(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthUseCaseMockRecorder) Logout(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthUseCase)(nil).Logout), ctx, refreshToken)
}

// Refresh mocks base method.
func (m *MockAuthUseCase) Refresh(ctx context.Context, refreshToken string) (*authUsecase.AuthResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, refreshToken)
	ret0, _ := ret[0].(*authUsecase.AuthResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthUseCaseMockRecorder) Refresh(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthUseCase)(nil).Refresh), ctx, refreshToken)
}

// Registration mocks base method.
func (m *MockAuthUseCase) Registration(ctx context.Context, data dto.RegistrationInputDto) (*authUsecase.AuthResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", ctx, data)
	ret0, _ := ret[0].(*authUsecase.AuthResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registration indicates an expected call of Registration.
func (mr *MockAuthUseCaseMockRecorder) Registration(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockAuthUseCase)(nil).Registration), ctx, data)
}
